int calcGCD(int n, int m){
    int ans=-1;
    int max;
    if(n>=m){
        max=n;
    }
    else max=m;

    for (int i = 1; i <= max; i++) { //note for future. Prefer 1 indexing, 0 indexing is causing silly error.
        if (n % i == 0 && m % i == 0) {
            ans=i;
        }
    }
return ans;
}


//better time complexity can be obtained using Euclidean algorithm :o
/*
#include <iostream>
using namespace std;

// Function to calculate the greatest common divisor (gcd) using Euclidean algorithm
int calcGCD(int n, int m) {
    while (n != 0) {
        // Temporary variable to store the value of n
        int temp = n;
        
        // Update n to the remainder of m divided by n
        n = m % n;
        
        // Update m to the original value of n
        m = temp;
    }

    // The final value of m is the gcd of the original two numbers
    return m;
}

int main() {
    // Example input values
    int n = 6, m = 4;

    // Output the calculated gcd
    cout << calcGCD(n, m);

    return 0;
}
*/
