long long sumFirstN(long long n) {
    if (n < 1) {
        return 0;
    }
    return n + sumFirstN(n - 1);
}

//exceed the time complexity; optimal soln is 

/*
The time complexity of your current implementation is O(n) because it recursively sums up all natural numbers from 1 to n. This approach is already quite efficient for calculating the sum of the first 'n' natural numbers.

However, if you're looking for an alternative approach to reduce the time complexity, you could consider using the formula for the sum of an arithmetic series:

Sum = (n * (n + 1)) / 2

This formula directly calculates the sum of the first 'n' natural numbers without the need for recursion or iteration. It has a time complexity of O(1), which is faster than the recursive approach.

Here's how you can implement it:
--------------------------------------------


long long sumFirstN(long long n) {
    if (n < 1) {
        return 0;
    }
    return (n * (n + 1)) / 2;
}
-------------------------------------------
This implementation has a constant time complexity regardless of the value of 'n'.




*/
